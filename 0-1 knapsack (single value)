    /// Build  in bottom up manner for single or just with wight or value
#include <bits/stdc++.h>
using namespace std;

int KnapSack (int cap, int wt[], int n)
{
    int i, w;
    int table[n+1][cap+1];

    for (i=0; i<=n; i++)
    {
        for (w=0; w<=cap; w++)
        {
            if (i==0 || w==0)table[i][w]=0;

            else if (wt[i-1]<=w)table[i][w]=max (wt[i-1]+table[i-1][w-wt[i-1]], table[i-1][w]);

            else table[i][w]=table[i-1][w];

        }
    }
    return table[n][cap];
}

int main ()
{
    int wt[100], val[100], i, cap, n;
    cout<<"Input the number of item and capacity : ";
    cin >> n >> cap;
    cout<<"Input the wight  according to item number " <<endl;
    for (i=0; i<n; i++){
        cin >> wt[i];
    }
    cout << KnapSack(cap, wt, n);
    return 0;
}

